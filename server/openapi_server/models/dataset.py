# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.wings_instance import WingsInstance
from openapi_server import util

from openapi_server.models.wings_instance import WingsInstance  # noqa: E501

class Dataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, type=None, data_catalog_id=None, url=None, wings_instance=None):  # noqa: E501
        """Dataset - a model defined in OpenAPI

        :param id: The id of this Dataset.  # noqa: E501
        :type id: str
        :param type: The type of this Dataset.  # noqa: E501
        :type type: str
        :param data_catalog_id: The data_catalog_id of this Dataset.  # noqa: E501
        :type data_catalog_id: str
        :param url: The url of this Dataset.  # noqa: E501
        :type url: str
        :param wings_instance: The wings_instance of this Dataset.  # noqa: E501
        :type wings_instance: WingsInstance
        """
        self.openapi_types = {
            'id': str,
            'type': str,
            'data_catalog_id': str,
            'url': str,
            'wings_instance': WingsInstance
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'data_catalog_id': 'data_catalog_id',
            'url': 'url',
            'wings_instance': 'wings_instance'
        }

        self._id = id
        self._type = type
        self._data_catalog_id = data_catalog_id
        self._url = url
        self._wings_instance = wings_instance

    @classmethod
    def from_dict(cls, dikt) -> 'Dataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Dataset of this Dataset.  # noqa: E501
        :rtype: Dataset
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Dataset.


        :return: The id of this Dataset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dataset.


        :param id: The id of this Dataset.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this Dataset.


        :return: The type of this Dataset.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Dataset.


        :param type: The type of this Dataset.
        :type type: str
        """

        self._type = type

    @property
    def data_catalog_id(self):
        """Gets the data_catalog_id of this Dataset.


        :return: The data_catalog_id of this Dataset.
        :rtype: str
        """
        return self._data_catalog_id

    @data_catalog_id.setter
    def data_catalog_id(self, data_catalog_id):
        """Sets the data_catalog_id of this Dataset.


        :param data_catalog_id: The data_catalog_id of this Dataset.
        :type data_catalog_id: str
        """

        self._data_catalog_id = data_catalog_id

    @property
    def url(self):
        """Gets the url of this Dataset.


        :return: The url of this Dataset.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Dataset.


        :param url: The url of this Dataset.
        :type url: str
        """

        self._url = url

    @property
    def wings_instance(self):
        """Gets the wings_instance of this Dataset.


        :return: The wings_instance of this Dataset.
        :rtype: WingsInstance
        """
        return self._wings_instance

    @wings_instance.setter
    def wings_instance(self, wings_instance):
        """Sets the wings_instance of this Dataset.


        :param wings_instance: The wings_instance of this Dataset.
        :type wings_instance: WingsInstance
        """

        self._wings_instance = wings_instance
